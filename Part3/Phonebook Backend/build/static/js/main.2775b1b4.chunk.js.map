{"version":3,"sources":["component/Persons.js","component/Filter.js","component/PersonForm.js","services/person.js","component/Notification.js","App.js","index.js"],"names":["Persons","props","console","log","personsToShow","map","p","name","number","id","onClick","deletePerson","Filter","onChange","GetFilter","PersonForm","Props","value","newName","GetName","newNumber","GetNumber","AddName","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","isError","messageType","className","App","useState","persons","setPersons","setNewName","setNewNumber","showAll","setShowAll","newFilter","setNewFilter","showChange","setShowChange","errorMessage","setErrorMessage","setIsError","filter","person","toLowerCase","indexOf","useEffect","personService","initialPerson","event","target","preventDefault","personObject","flag","forEach","pn","window","confirm","setTimeout","catch","error","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2775b1b4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Persons = (props) => {\r\nconsole.log(props.personsToShow)\r\n    return (\r\n    <div>\r\n        { props.personsToShow.map(p =>\r\n          \r\n            <p key = {p.name}>\r\n                {p.name} {p.number}\r\n            <button id= {p.id} name={p.name} onClick={props.deletePerson}>Delete</button>\r\n            </p>\r\n \r\n            )\r\n         }    \r\n\r\n    </div>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Persons ","import React from 'react'\r\n\r\nconst Filter =(props) => {\r\n    return (\r\n\r\n        <div> filter shown with <input   onChange ={props.GetFilter}/></div>  \r\n\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default Filter;","import React from 'react'\r\n\r\n\r\nconst PersonForm = (Props) => {\r\n\r\nreturn (\r\n\r\n<form>\r\n          <div> name: <input value ={Props.newName} onChange ={Props.GetName}/></div>  \r\n\r\n          <div> number: <input value ={Props.newNumber} onChange ={Props.GetNumber}/></div>\r\n          \r\n          <div><button onClick={Props.AddName}>add</button></div>\r\n</form>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default PersonForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n\r\nconst getAll =() =>{\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject =>{\r\n    const request =  axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update =(id,newObject) =>{\r\n    const request = axios.put(`${baseUrl}/${id}`,newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove =(id) =>{\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\n\r\nexport default { getAll,create,update,remove}","import React from 'react'\r\n\r\nconst Notification = ({ message, isError }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n   let messageType = (isError)?\"error\":\"success\"\r\n   \r\n    return (\r\n      <div className={messageType}>\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React, { useState,useEffect} from 'react'\nimport Persons from './component/Persons'\nimport Filter from './component/Filter'\nimport PersonForm from './component/PersonForm'\n//import axios from 'axios'\nimport personService from './services/person'\nimport Notification from './component/Notification'\n\n \n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [ newFilter, setNewFilter] = useState('')\n  const [showChange, setShowChange] = useState(false)\n  const [errorMessage,setErrorMessage] = useState(null)\n  const [isError,setIsError] = useState(false)\n\n  const personsToShow = showAll\n  ? persons\n  : persons.filter(person => person.name.toLowerCase().indexOf(newFilter.toLowerCase()) !== -1)\n\n\nconst GetFilter = (event) =>{\n  setNewFilter(event.target.value)\n    if(event.target.value !== '') {\n      setShowAll(false)}\n    else {\n      setShowAll(true)}\n}\n  //get input name and assign to newName \n  const GetName = (event) =>{\n      console.log(event.target.value);\n      setNewName(event.target.value);\n  }\n//get input number and assign to newNumber\nconst GetNumber = (event) =>{\n  console.log(event.target.value);\n  setNewNumber(event.target.value);\n}\n\n    \n//Add names to persons array\n  const AddName =(event) => {\n  \n   event.preventDefault();\n//new person\n  const personObject ={\n    name: newName,\n    number: newNumber\n    //id: persons[persons.length-1].id +1 \n  }\n    // flag to create or update the list\n    let flag = true\n  //Check if the person already exists\n        persons.forEach(pn =>{\n          if (pn.name.toLowerCase() === newName.toLowerCase() ) {\n            //Alert for Update \n            let result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n           if (result) { // Update\n\n            personService\n            .update(pn.id,personObject)\n            .then(()=>{setShowChange(!showChange)})\n            .then(()=>{\n              setErrorMessage(`Number Updated for ${newName}`)\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n            })\n              .catch(error=>{\n                setShowChange(!showChange)\n                setIsError(true)\n                setErrorMessage(`${pn.name} was already deleted from the server`)\n                setTimeout(() => {\n                  setIsError(false)\n                  setErrorMessage(null)\n                }, 5000)\n              })\n     \n\n           }\n\n           else{ // do not Update\n            setNewName('')\n            setNewNumber('')\n            \n            return\n           }\n           flag = false\n          }\n        }\n        ) \n //Create Person if not already in the list   \n if (flag){ \n    personService\n    .create(personObject)\n    .then(returnedPerson =>{\n\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNewFilter('')\n        })\n        .catch(error => {\n          setIsError(true)\n          setErrorMessage(error.response.data)\n          setTimeout(() => {\n            setIsError(false)\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .then(()=>{\n          setErrorMessage(`Added ${newName}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n     }\n     \n  }\n \n\n const deletePerson = (event) => {\n  let result = window.confirm(`Delete ${event.target.name} ?`)\n  if(result){\n    personService\n    .remove(event.target.id)\n    .then(()=>{setShowChange(!showChange)})\n    .then(()=>{\n      setErrorMessage(`Deleted ${event.target.name}`)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n    .catch(error=>{\n      setIsError(true)\n      setErrorMessage(`${event.target.name} was already deleted from the server`)\n      setShowChange(!showChange)\n      setTimeout(() => {\n        setIsError(false)\n        setErrorMessage(null)\n      }, 5000)\n    })\n  } \n }\n\n//Get all the contact list\n useEffect(() =>{\nconsole.log(\"GetAll\")\n   personService\n   .getAll()\n   .then(initialPerson =>{\n     setPersons(initialPerson)\n   })\n\n  },[showChange])\n\n\n  \n \n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} isError={isError}/>\n          <Filter GetFilter = {GetFilter}/>\n      <h2>Add New</h2>\n\n      <PersonForm GetName={GetName} GetNumber={GetNumber} newName={newName} newNumber={newNumber} AddName={AddName}/>\n\n      <h2>Numbers</h2>\n     \n        <Persons personsToShow={personsToShow} deletePerson={deletePerson} />\n  \n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}